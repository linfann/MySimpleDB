package simpledb.execution;

import simpledb.common.Database;
import simpledb.transaction.TransactionAbortedException;
import simpledb.common.DbException;
import simpledb.storage.Tuple;
import simpledb.storage.TupleDesc;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;
    private JoinPredicate predicate;
    private OpIterator child1;
    private OpIterator child2;
    private TupleDesc tupleDesc;
    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        // some code goes here
        this.predicate = p;
        this.child1 = child1;
        this.child2 = child2;

        List<TupleDesc.TDItem> descList1 = child1.getTupleDesc().getDescList();
        List<TupleDesc.TDItem> descList2 = child2.getTupleDesc().getDescList();
        List<TupleDesc.TDItem> newList = new ArrayList<>(descList1.size() + descList2.size());
        newList.addAll(descList1);
        newList.addAll(descList2);
        this.tupleDesc = new TupleDesc(newList);
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return predicate;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        // some code goes here
        int field1 = this.predicate.getField1();
        return child1.getTupleDesc().getFieldName(field1);
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        // some code goes here
        int field2 = this.predicate.getField2();
        return child2.getTupleDesc().getFieldName(field2);
    }

    /**
     * @see TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here
        return this.tupleDesc;
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
        this.child1.open();
        this.child2.open();
        restart = true;
        super.open();
    }

    public void close() {
        // some code goes here
        this.child1.close();
        this.child2.close();
        super.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
        close();
        open();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */

    private Tuple tuple1,tuple2;
    private boolean restart;
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
        while (child1.hasNext()||!restart){
            if (restart){
                tuple1 = child1.next();
                restart = false;
            }
            while (child2.hasNext()){
                tuple2 = child2.next();
                if (predicate.filter(tuple1,tuple2)){
                    return combineTuple(tuple1,tuple2);
                }
            }
            child2.rewind();
            restart = true;
        }
        return null;
    }

    private Tuple combineTuple(Tuple tuple1,Tuple tuple2){
        Tuple reTuple = new Tuple(tupleDesc);
        int len1 = tuple1.getTupleDesc().numFields(), len2 = tuple2.getTupleDesc().numFields();
        for(int i = 0;i<len1;i++)reTuple.setField(i,tuple1.getField(i));
        for(int i = 0;i<len2;i++)reTuple.setField(len1+i,tuple2.getField(i));
        return reTuple;
    }

    @Override
    public OpIterator[] getChildren() {
        // some code goes here
        return new OpIterator[]{this.child1,this.child2};
    }

    @Override
    public void setChildren(OpIterator[] children) {
        // some code goes here
        if (children.length==2){
            child1 = children[0];
            child2 = children[1];
        }
    }

}
